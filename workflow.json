{
	"Headers": {
		"Name":			"WorkFlow title",
		"ArchBuild":	"[noarch | archname]",
		"Version":		n,
		"Release":		i.j,
		"Summary":		"what it is used for",
		"License":		"[Public | Private]",
		"Description":	"detailled desc of the workflow"
	}

	"Sources": {
		"source0": "composant0.xml,
		%...
		'''["sourceK": "composantK.xml"]'''
	}


	// ici on manipule notre markup language XML, par ex :
	"Execution": {
		<WorkFlow>
			<declare retValSource0={}, retValSource1={}>
				<execute source=$source0>
					<param> </param>
					<return>$retValSource0</return>
				</execute>
				<execute source=$source1>
					<param> </param>
					<return>$retValSource1</return>
				</execute>

				<do>
					<cond> $retValSource0 < $retValSource1 </cond>
					<then> </then>
					<else> </else>
					<failure> </failure>
				</do>
			</declare>
		</WorkFlow>
	}
}

%%%

    Generalized markup; it is possible to create "dialects" for any kind of purposes :
    - XML Schema for datatype, structure validation. Makes it also possible to create new datatypes
    - XSLT for transformation into different output formats
    - XPath/XQuery for extracting information in deeply nested structures
    - built in support for namespaces

%%%
