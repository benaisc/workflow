<!-- DEFINITION DU STMCASSEMBLY LE PLUS SIMPLISTE CONSISTANT SIMPLEMENT EN UN HELLOWORLD -->
<assembly>
	<!-- BLOC DE DECLARATION ON CE CONTENTE DE CRÉER : 
	 	- UN COMPOSANT BASIQUE AVEC AUCUN IN (APPEL DE LA MÉTHODE SET_VOID PAR L'ORDONNANCEUR POUR LE LANCER) ET UN SEUL OUT (IL FAUT MINIMUM UN OUT AFIN QUE L'ORDONNANCEUR PUISSE DÉTERMINER QUAND EST CE QUE LE COMPOSANT EST "FINI").
	 	- UNE SEULE INSTANCE AVEC LE COMPOSANT CRÉER PRÉCÉDÉMENT EN RÉFÉRENCE ET QUI LANCE UN PROGRAMME RPC QUI IMPLEMENTE :
	 		- LA MÉTHODE SET_VOID POUR CE LANCER
	 		- QUI FINI DE S'ÉXÉCUTER EN APPELANT LA MÉTHODE SET_OUT_OUTC1 SUR L'ORDONNANCEUR.

	 -->
	<declare>
		<!-- COMPONENT DECLARATION -->
		<component name= "C1">
			<dataOut name="outC1" type="string"/>
			<!-- Attribute is optionnal we don't use it for this example-->
			a la fin de son exécution, il effectue un outC1
			comme y'à pas de dataIn, l'instance est obligée d'implémenter une méthode setVoid afin de démarrer; c'est notre ordonnanceur qui appelera cette methode en tant que client sur un serveur 
		</component>

		<!-- INSTANCE DECLARATION -->
		<instance name="T1" componentRef="C1">
  			<impl type="c" signature=."/programs/HelloRPC"/>
		</instance>
	</declare>


	<!-- UN STMCASSEMBLY NE POSSEDE QU'UNE SEULE INSTRUCTION DANS NOTRE CAS IL S'AGIRA SIMPLEMENT D'UN EXECTASK CAR UNE SEULE INSTANCE EST A INVOQUER -->
	<instruction>	
		<exectask nameInstance="T1"/>
	</instuction>

</assembly>

<!-- NB : CELA NE NOUS PERMET PAS ENCORE D'ÉXÉCUTÉ CELA POUR AUTANT CAR ON A TOUJOURS LE PROBLÈME QUE L'ORDONNANCEUR DOIS GENERER DU CODE ... -->




