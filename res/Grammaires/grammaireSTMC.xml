component ::=
<component name=string (extends=string)?>
  port* attribute* content? membrane?
</component>

port ::= clientport | serverport | inport | outport

clientport ::= <clientPort name=string type=string (set=string)?/>
serverport ::= <serverPort name=string type=string/>

inport ::= <dataIn name=string type=string (set=string)?/>
outport ::= <dataOut name=string type=string/>

attribute ::= <attribute name=string type=string (set=string)?/>

membrane ::= <controllerDesc desc=string/>

content ::= primitive | composite

primitive ::= <impl type=string signature=string/>

composite ::= <body> stcmassembly </body>

stcmassembly ::= declaration? instruction?

declaration ::= <declare> component* instance* configport* </declare>

instance ::=
<instance name=string componentRef=string>
  content? membrane?
</instance>

configport ::= clientserver | inout

clientserver ::= <setPort client=string server=string/>
| <unsetPort client=string (server=string)?/>

inout ::= <setPort in=string out=string/>
| <unsetPort in=string (out=string)?/>

instruction ::=
instance | executetask | configport | seq | if | switch | parallel |
while|for|forEach|dag|parallelFor|parallelForEach

executetask ::= <exectask nameInstance=string/>

seq ::=
<sequence name=string>
  port* attribute* declaration instruction+
</sequence>

if ::= <if name=string> port* attribute* declaration condition then else?</if>
condition ::= <condition> expr </condition>
then ::= <then> stcmassembly </then>
else ::= <else> stcmassembly </else>

parallel ::= <parallel name=string> port* attribute* declaration section+</parallel>

section ::= <section> stcmassembly </section>

switch ::= <switch name=string>port* attribute* declaration case+ default?</switch>
case ::= <case condition=string (break=boolean)?> stcmassembly </case>
default ::= <default> stcmassembly </default>

boolean ::= "true" | "false"
