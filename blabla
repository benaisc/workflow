STCMAssemblyXML => Parsing => Représentation => (Définitions =>) Stratégie d'ordonnancement => (Ordonnanceur)
					Partie description
										On différencie le quesque(représentation) du quoi (stratégie)
_____________________________________________<< partie à coder



On suppose que l'instance implémente les ports du composant qu'il référence.
(ça suppose plein de choses, gestion d'erreur, à voir)

A l'exectask on prépare la structure de récéption des DataIn, et c'est quand les DataIn seront tous présents qu'on démarrera le composant

On référence nos instances par refInstance qui est un type opaque (ex : createRefInstance(instance))

Un type opaque RefInstance peut-être un objet, une interface, une addresse.... (WebService, RemoteObject, Interface RPC, ....)

Pour communiquer une donnée entrante (dataIn) a une instance sur un port, on utilise un type opaque RefPortIn (peut-être une interface, une addresse...?)
On récupère ce type opaque sur l'instance avec un appel à getPort(instance, dataInName); qui permet ensuite de communiquer avec l'instance grâce à des méthodes génériques prenant la forme : set_type_dataInName(type data)

Pour chaque instance et pour chacun de ses ports out (données sortantes, dataOut) l'ordonnanceur dispose d'une référence sur un typeOpaque RefPortOut 
RefPortOut doit implémenter une méthode de type set_typePort_nomPort

Ordonnanceur => refInstance => refPortOut rend disponible set_typePort_nomPort qui sera appelée par <= Instance <= Composant


Action de gestion : 

Gestion d'instance : refInstance
	- Démarrage
	- Arrêt/Destruction

Envoi d'une Donnée : refPortIn
"Une composant est instancié (mais non démarré), pour le démarré, on à besoin de posséder toutes les données dont à besoin l'instance."
L'envoi d'une donnée consiste à donner/transférer une donnée à l'application démarrée

Dans le cas où il n'y à pas de données d'entrée, refPortIn

Côtés implémentation....

Reception d'une Donnée : refPortOut
